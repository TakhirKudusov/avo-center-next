import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import styled from 'styled-components';
import { devices } from '../../common/constants';
import { getQueryParams } from '../../common/helpers/manageQueryParams.helper';
import {
  LIKE_ITEMS,
  PRICE_ITEMS,
  TYPE_ITEMS,
} from '../../components/catalog/constants';
import FilterBar from '../../components/catalog/FilterBar';
import {
  convertQueryParams,
  onLocationChange,
} from '../../components/catalog/helpers';
import { TFilterOption } from '../../components/catalog/types';
import { FlexContainer, PageContainer } from '../../components/common';
import BidGrid from '../../components/common/components/BidGrid';
import StoreLayout from '../../components/layouts/store';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';
import { fetchCategories } from '../../redux/slicers/discoverSlicer/discoverSlicer';
import { TDiscoverState } from '../../redux/slicers/discoverSlicer/types';

const Catalog = () => {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const [queryParams, setQueryParams] = useState<string>();
  const [priceRange, setPriceRange] = useState({});
  const { categories, bids, nfts, loading } = useAppSelector<TDiscoverState>(
    (state) => state.discover,
  );

  const handleLocationChange = onLocationChange(dispatch, setPriceRange);

  const onCategoryChange = () => {
    const queryParams = convertQueryParams(
      getQueryParams(window.location.search),
    );
    console.log('queryParams=', queryParams);
    setQueryParams(JSON.stringify(queryParams));
  };

  // const handlePageChange = (page: number) => {
  //   pushQueryParams([{ name: 'page', value: page }]);
  // };

  const categoryOptions: TFilterOption[] = categories.map((category) => ({
    id: category._id,
    name: category.name,
    url: category._id,
  }));

  useEffect(() => {
    localStorage.removeItem('location');
    window.addEventListener('locationChange', () => {
      handleLocationChange();
      onCategoryChange();
    });

    setTimeout(() => {
      setPriceRange({
        minPrice: 0,
        maxPrice: 1000,
      });
    });

    (async () => {
      await dispatch(fetchCategories());
      // await dispatch(fetchParentCategories());
      // await dispatch(fetchTags());
      await handleLocationChange();
      onCategoryChange();
    })();

    return () => {
      window.removeEventListener('locationChange', handleLocationChange);
    };
  }, []);

  return (
    <div>
      <Head>
        <title>AVO NFT - Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <FlexContainer>
        <PageContainer>
          <ContentHeading>
            <ContentTitle>Discover the art of NFT</ContentTitle>
          </ContentHeading>
          <ContentWrapper style={{ paddingTop: '60px' }}>
            <FilterBar
              types={TYPE_ITEMS}
              categories={categoryOptions}
              likes={LIKE_ITEMS}
              prices={PRICE_ITEMS}
              priceRange={priceRange}
            />
            {loading && '...loading'}
            {!loading && <BidGrid items={[...bids, ...nfts]} elemPerRow={3} />}
          </ContentWrapper>
        </PageContainer>
      </FlexContainer>
    </div>
  );
};

const ContentWrapper = styled.div`
  display: flex;
  gap: 100px;
  padding-top: 128px;
  width: 100%;
  padding-bottom: 112px;

  @media (${devices.mobile}) {
    padding-top: 80px;
  }
`;

const ContentHeading = styled.div`
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
`;

const ContentTitle = styled.h1`
  font-family: 'DM Sans';
  font-weight: 700;
  font-size: 32px;
  line-height: 56px;
  letter-spacing: -0.02em;
  color: #23262f;
  max-width: 455px;
  margin: 40px 0 0;
`;

Catalog.PageLayout = StoreLayout;

export default Catalog;
